@page "/dashboard/punishments"
@inject HttpClient httpClient
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles = "Admin, Moderator")]
@using System.Globalization;

<br />
<br />

@if (punishments != null)
{
    <DataTable Data="punishments" Categories="categories" FormModalId="@("#punishmentModal")" TableStructure="tableStructure" />
    <FormModal Id="punishmentModal" Title="Create Punishment" Model="punishment" OnValidSubmit="SumbitAsync">
        <div class="form-row mb-2">
            <div class="form-group">
                <label for="player">Player</label>
                <input readonly id="player" class="form-control-plaintext" value="@(target.Key != null ? $"{target.Key} ({target.Value})" : "")" />
                <ValidationMessage class="validation-message" For="@(() => punishment.PlayerId)" />
            </div>
            <div class="form-group mx-sm-3 dropdown @(filter.Length > 2 ? "show" : "")">
                <label for="search">Search</label>
                <input id="search" class="form-control" @bind-value="@filter" @bind-value:event="oninput" placeholder="Find Player" />
                <div class="dropdown-menu @(filter.Length > 2 ? "show" : "")">
                    @foreach (var player in filteredPlayers)
                    {
                        <a value="@player.Key" class="dropdown-item" @onclick="((args) => ChangePlayerId(player))" href="javascript:void(0)">
                            @player.Key (@player.Value)
                        </a>
                    }
                </div>
            </div>
        </div>        
        <div class="form-group">
            <label for="reason">Reason</label>
            <InputText id="reason" class="form-control is-invalid" @bind-Value="@punishment.Reason" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => punishment.Reason)" />
            </div>
        </div>
        <div class="form-group">
            <label for="name">Category</label>
            <InputSelect id="category" class="form-control is-invalid" @bind-Value="@punishment.Category">
                <option value="">Select Category</option>
                <option value="ban">Ban</option>
                <option value="kick">Kick</option>
                <option value="warn">Warn</option>
            </InputSelect>
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => punishment.Category)" />
            </div>
        </div>
        @if (punishment.Category == "ban")
        {
            <div class="form-group">
                <label for="expiry">Duration (minutes)</label>
                <input type="number" id="duration" class="form-control is-invalid" @onchange="ChangeExpiryDate" />
                <div class="invalid-feedback">
                    <ValidationMessage For="@(() => punishment.ExpiryDate)" />
                </div>
            </div>
        }
    </FormModal>
}
else
{
    <ProgressBar />
}

@code {
    string[] categories = new string[]
    {
        "ban",
        "kick",
        "warn"
    };

    Dictionary<string, string> tableStructure = new Dictionary<string, string>()
    {
        { "ID", "PunishmentId" },
        { "Player", "Player.PlayerName" },
        { "Punisher", "Punisher.PlayerName" },
        { "Expiry Date", "ExpiryDate" },
        { "Create Date", "CreateDate" }
    };

    string filter = string.Empty;
    KeyValuePair<string, string> target;
    List<PlayerPunishment> punishments;
    Dictionary<string, string> filteredPlayers =>
        players.Where(x => x.Key.ToLower().Contains(filter.ToLower()) || x.Value.ToLower().Contains(filter.ToLower())).Take(3).ToDictionary(x=> x.Key, x=> x.Value);
    Dictionary<string, string> players;
    PlayerPunishment punishment = new PlayerPunishment();

    protected override async Task OnInitializedAsync()
    {
        punishments = await httpClient.GetJsonAsync<List<PlayerPunishment>>("api/punishments/dashboard");
        Console.WriteLine("Count of idk: " + punishments.Count);
        players = await httpClient.GetJsonAsync<Dictionary<string, string>>("api/players/search");
    }

    private async Task SumbitAsync()
    {
        await httpClient.SendJsonAsync(HttpMethod.Post, "api/punishments", punishment);
        punishment = new PlayerPunishment();
    }

    void ChangePlayerId(KeyValuePair<string, string> player)
    {
        punishment.PlayerId = player.Key;
        target = player;
        filter = string.Empty;
    }

    void ChangeExpiryDate(ChangeEventArgs args)
    {
        punishment.ExpiryDate = DateTime.Now.AddMinutes(Convert.ToDouble(args.Value));
    }


}
