@attribute [Authorize(Roles = "Admin, Moderator")]
@page "/dashboard/punishments"
@layout DashboardLayout
@inject HttpClient httpClient
@inject IJSRuntime JsRuntime

<br />
<br />

@if (punishments != null)
{
    <DataTable Data="punishments" Categories="categories" FormModalId="@("#punishmentModal")" TableStructure="tableStructure" Title="Punishments" />
    <FormModal Id="punishmentModal" Title="Create Punishment" Model="punishment" OnValidSubmit="SumbitAsync">
        <PlayersSearch @bind-BindingValue="@punishment.PlayerId">
            <ValidationMessage class="validation-message" For="@(() => punishment.PlayerId)" />
        </PlayersSearch>
        <div class="form-group">
            <label for="reason">Reason</label>
            <InputText id="reason" class="form-control" @bind-Value="@punishment.Reason" />
            <div class="validation-message">
                <ValidationMessage For="@(() => punishment.Reason)" />
            </div>
        </div>
        <div class="form-group">
            <label for="name">Category</label>
            <InputSelect id="category" class="form-control" @bind-Value="@punishment.Category">
                <option value="">Select Category</option>
                <option value="ban">Ban</option>
                <option value="kick">Kick</option>
                <option value="warn">Warn</option>
            </InputSelect>
            <div class="validation-message">
                <ValidationMessage For="@(() => punishment.Category)" />
            </div>
        </div>
        @if (punishment.Category == "ban")
        {
            <div class="form-group">
                <label for="expiry">Duration (minutes)</label>
                <input type="number" id="duration" class="form-control" @onchange="ChangeExpiryDate" />
                <div class="validation-message">
                    <ValidationMessage For="@(() => punishment.ExpiryDate)" />
                </div>
            </div>
        }
    </FormModal>
}
else
{
    <ProgressBar />
}

@code {
    string[] categories = new string[]
    {
        "ban",
        "kick",
        "warn"
            };

    Dictionary<string, string> tableStructure = new Dictionary<string, string>()
{
        { "ID", "PunishmentId" },
        { "Player", "Player.PlayerName" },
        { "Punisher", "Punisher.PlayerName" },
        { "Expiry Date", "ExpiryDate" },
        { "Create Date", "CreateDate" }
    };

    List<PlayerPunishment> punishments;

    Dictionary<string, string> players;
    PlayerPunishment punishment = new PlayerPunishment();

    protected override async Task OnInitializedAsync()
    {
        punishments = await httpClient.GetJsonAsync<List<PlayerPunishment>>("api/punishments/dashboard");
        players = await httpClient.GetJsonAsync<Dictionary<string, string>>("api/players/search");
    }

    private async Task SumbitAsync(object model)
    {
        punishments.Add(await httpClient.SendJsonAsync<PlayerPunishment>(HttpMethod.Post, "api/punishments", punishment));
        punishment = new PlayerPunishment();
    }

    void ChangeExpiryDate(ChangeEventArgs args)
    {
        punishment.ExpiryDate = DateTime.Now.AddMinutes(Convert.ToDouble(args.Value));
    }
}