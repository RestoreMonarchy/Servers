@attribute [Authorize]
@page "/ticket/{TicketId:int}"
@inject HttpClient httpClient
@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime js

@if (ticket != null)
{
    <div class="card mt-3">
        <h5 class="card-header font-weight-bold">
            <img src="data:image;base64,@Convert.ToBase64String(ticket.Author.PlayerAvatar)" class="rounded-circle" width="35" height="35"> @ticket.Author.PlayerName
        </h5>
        <div class="card-body">
            <h4 class="card-title">@ticket.Title</h4>
            <p class="card-text">@ticket.Content</p>
        </div>
        <div class="card-footer text-muted">
            Create Date @ticket.CreateDate.ToString("G") Last Update @ticket.LastUpdate.ToString("G")
        </div>
    </div>
    @foreach (var answer in ticket.Answers)
    {
        <div class="card mt-3">
            <h5 class="card-header font-weight-bold">
                <img src="data:image;base64,@Convert.ToBase64String(answer.Author.PlayerAvatar)" class="rounded-circle" width="35" height="35"> @answer.Author.PlayerName
            </h5>
            <div class="card-body">
                <p class="card-text">@answer.Content</p>
            </div>
            <div class="card-footer text-muted">
                Create Date @answer.CreateDate.ToString("G") Last Update @answer.LastUpdate.ToString("G")
            </div>
        </div>
    }

    if (!ticket.Status)
    {
        <div class="card mt-3">
            <h5 class="card-header font-weight-bold">
                <img src="data:image;base64,@state.User.FindFirst("Avatar").Value" class="rounded-circle" width="35" height="35"> @state.User.FindFirst("PlayerName").Value
            </h5>
            <div class="card-body">
                <EditForm Model="response" OnValidSubmit="SubmitAsync">
                    <DataAnnotationsValidator />
                    <p class="card-text">
                        <InputTextArea rows="4" id="content" class="form-control" @bind-Value="@response.Content" />
                    </p>
                    <div class="validation-message">
                        <ValidationMessage For="@(() => response.Content)" />
                    </div>
                    <button type="submit" class="btn btn-primary float-right">Submit</button>
                </EditForm>
            </div>
            <div class="card-footer text-muted">
                Create Date @DateTime.Now.ToString("G") Last Update @DateTime.Now.ToString("G")
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-danger mt-3" role="alert">
            <i class="material-icons">warning</i> The ticket is closed
        </div>
    }

}
else if (!isAuthorized)
{
    <div class="display-4 text-center mt-3">You are unauthorized to see this ticket</div>
}
else
{
    <ProgressBar />
}


@code {
    [Parameter]
    public int TicketId { get; set; }

    private Ticket ticket;
    private TicketAnswer response = new TicketAnswer();

    AuthenticationState state;
    bool isAuthorized = true;

    protected override async Task OnInitializedAsync()
    {
        state = await authenticationStateProvider.GetAuthenticationStateAsync();
        var response = await httpClient.GetAsync("/api/tickets/" + TicketId);

        if (response.StatusCode != HttpStatusCode.Unauthorized)
        {
            ticket = await response.Content.GetJsonAsync<Ticket>();
        }
        else
        {
            isAuthorized = false;
        }
    }

    private async Task SubmitAsync()
    {
        response.TicketId = ticket.TicketId;
        var result = await httpClient.SendJsonResponseAsync<TicketAnswer>(HttpMethod.Post, "api/tickets/answer", response);
        if (result.StatusCode == HttpStatusCode.BadRequest)
        {
            await js.DisplayMessage("Cooldown", $"{result.Cooldown} seconds", AlertIcon.ERROR);
        }
        else
        {
            ticket.Answers.Add(result.Content);
            await js.Notify("Successfully sent your answer!", AlertIcon.SUCCESS, 1500);
            response = new TicketAnswer();
        }
    }
}
