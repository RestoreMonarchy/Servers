@page "/account"
@using Core.Models;
@inject HttpClient httpClient
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [Authorize]

<br />
<br />
@if (player != null && tickets != null)
{
    <div class="row">
        <div class="col-lg-4">
            <img src="/img/avatars/@string.Concat(player.PlayerId, ".jpg")" class="rounded-circle mx-auto d-block" width="130" height="130">
            <h4 class="display-4 mt-lg-2 text-align-center">@player.PlayerName</h4>
            <ul class="list-group">
                <li class="list-group-item active"><b>SteamID:</b> @player.PlayerId</li>
                <li class="list-group-item"><b>Name:</b> @player.PlayerName</li>
                <li class="list-group-item"><b>Balance:</b> @player.Balance.ToString("C")</li>
                <li class="list-group-item"><b>Role:</b> @player.Role</li>
                <li class="list-group-item"><b>Country:</b> @player.PlayerCountry</li>
                <li class="list-group-item"><b>Bans:</b> @player.PlayerBans.Count</li>
                <li class="list-group-item"><b>Tickets:</b> @tickets.Count</li>
                <li class="list-group-item"><b>Last Activity:</b> @player.PlayerLastActivity</li>
            </ul>
        </div>
        <div class="col-lg-8 bg-light rounded mt-3">
            <h3 class="display-3 mb-lg-3 mt-2">Your Tickets</h3>
            <table class="table table-striped table-responsive-lg">
                <thead>
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col">Title</th>
                        <th scope="col">Responses</th>
                        <th scope="col">Create Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ticket in tickets)
                    {
                        <tr>
                            <th scope="row">@ticket.TicketId</th>
                            <td>@ticket.TicketTitle</td>
                            <td>@ticket.Responses.Count</td>
                            <td>@ticket.TicketCreated</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    
    <a href="javascript:void(0)" data-toggle="modal" data-target="#ticketModal" @onclick="(e => { editTicket = new Ticket(); isEdit = false; })" class="btn btn-float btn-info my-1 mb-2 mr-2" style="position: absolute; right: 0; bottom: 0;" type="button"><i class="material-icons">add</i></a>
    <TicketForm Ticket="editTicket" IsEdit="isEdit" OnSubmitted="OnSubmittedAsync" />
}
else
{
    <ProgressBar />
}

@code {
    Player player;
    List<Ticket> tickets;
    Ticket editTicket;
    bool isEdit;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        player = await httpClient.GetJsonAsync<Player>("api/players");
        tickets = await httpClient.GetJsonAsync<List<Ticket>>("api/tickets");
    }

    public async Task OnSubmittedAsync(Ticket ticket)
    {
        if (isEdit)
            await PatchProductAsync(ticket);
        else
            await PostTicketAsync(ticket);
    }

    public async Task PostTicketAsync(Ticket ticket)
    {
        tickets.Add(ticket);
        await httpClient.PostJsonAsync("api/tickets", ticket);
    }

    public async Task PatchProductAsync(Ticket ticket)
    {
        Console.WriteLine("Patch");
        //string content = JsonConvert.SerializeObject(product);
        //var msg = new HttpRequestMessage(new HttpMethod("PATCH"), "api/products");
        //msg.Content = new StringContent(content, System.Text.Encoding.UTF8, "application/json");

        //var response = await httpClient.SendAsync(msg);
    }
}
