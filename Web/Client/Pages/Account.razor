@page "/account"
@using Core.Models;
@inject HttpClient httpClient
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [Authorize]

<br />
<br />
@if (player != null && tickets != null && punishments != null)
{
    <div class="row">
        <div class="col-lg-4">
            <div class="row justify-content-center mb-3">
                <div class="col-lg-auto">
                    <img src="data:image;base64,@Convert.ToBase64String(player.PlayerAvatar)" class="rounded-circle mx-auto d-block" width="110" height="110">
                </div>
                <div class="col-lg-auto mt-lg-4 text-center">
                    <h4>@player.PlayerName</h4>
                    <h6 class="text-muted">@player.PlayerId</h6>
                </div>
            </div>
            <ul class="list-group">
                <li class="list-group-item disabled font-weight-bold">Personal Information</li>
                <li class="list-group-item"><b>Balance:</b> @player.Balance.ToString("C")</li>
                <li class="list-group-item"><b>Role:</b> @player.Role</li>
                <li class="list-group-item"><b>Country:</b> @(player.PlayerCountry == null ? "unkown" : player.PlayerCountry)</li>
                <li class="list-group-item"><b>Tickets:</b> @tickets.Count</li>
                <li class="list-group-item"><b>Last Activity:</b> @player.PlayerLastActivity</li>
            </ul>
        </div>
        <div class="col-lg-8 bg-light rounded mt-3 pb-3">
            <Tabs>
                <Tab Text="Tickets">
                    <DataTable Data="tickets" TableStructure="ticketsStructure" Title="Your Tickets" />
                    <a href="javascript:void(0)" data-toggle="modal" data-target="#ticketModal" class="btn btn-float btn-primary my-1 mb-2 mr-2" style="position: fixed; right: 0; bottom: 0;" type="button"><i class="material-icons">add</i></a>
                    <TicketForm Ticket="new Ticket()" IsEdit="false" OnSubmitted="OnSubmittedAsync" />
                </Tab>
                <Tab Text="Punishments">
                    <DataTable Data="punishments" TableStructure="punishmentsStructure" Categories="categories" Title="Your $category Punishments" />
                </Tab>
            </Tabs>
        </div>
    </div>    
}
else
{
    <ProgressBar />
}

@code {
    Player player;
    List<Ticket> tickets;
    List<PlayerPunishment> punishments;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        player = await httpClient.GetJsonAsync<Player>("api/players");
        tickets = await httpClient.GetJsonAsync<List<Ticket>>("api/tickets");
        punishments = await httpClient.GetJsonAsync<List<PlayerPunishment>>("api/punishments");
    }

    public async Task OnSubmittedAsync(Ticket ticket)
    {
        await PostTicketAsync(ticket);
    }

    public async Task PostTicketAsync(Ticket ticket)
    {
        ticket = await httpClient.PostJsonAsync<Ticket>("api/tickets", ticket);
        tickets.Add(ticket);
    }

    Dictionary<string, string> punishmentsStructure = new Dictionary<string, string>()
{
        { "ID", "PunishmentId" },
        { "Punisher", "Punisher.PlayerName" },
        { "Reason", "Reason" },
        { "Expiry Date", "ExpiryDate" },
        { "Create Date", "CreateDate" }
    };

    string[] categories = new string[]
    {
        "ban",
        "kick",
        "warn"
    };

    Dictionary<string, string> ticketsStructure = new Dictionary<string, string>()
    {
        { "ID", "TicketId" },
        { "Title", "Title" },
        { "Answers", "Answers.Count" },
        { "Create Date", "CreateDate" }
    };
}
