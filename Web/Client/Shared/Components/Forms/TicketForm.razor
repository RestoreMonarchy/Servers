@using Core.Models;
@attribute [Authorize]
@inject IJSRuntime JsRuntime;

<div class="modal fade" id="ticketModal" tabindex="-1" role="dialog" aria-labelledby="ticketLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ticketLabel">@(IsEdit ? "Edit" : "Create") Ticket</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @if (Ticket != null)
            {
                <EditForm Model="@Ticket" OnValidSubmit="onSumbit">
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label for="name">Name</label>
                            <InputText id="name" class="form-control is-invalid" @bind-Value="@Ticket.Title" />
                            <div class="invalid-feedback">
                                <ValidationMessage For="@(() => Ticket.Title)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="description">Content</label>
                            <InputTextArea rows="8" id="descirption" class="form-control is-invalid" @bind-Value="@Ticket.Content" />
                            <div class="invalid-feedback">
                                <ValidationMessage For="@(() => Ticket.Content)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="category">Category</label>
                            <InputSelect id="category" class="form-control is-invalid" @bind-Value="@Ticket.Category">
                                <option value="">Select Category</option>
                                <option value="shop">Shop</option>
                                <option value="bug">Bug</option>
                                <option value="app">Staff Application</option>
                            </InputSelect>
                            <div class="invalid-feedback">
                                <ValidationMessage For="@(() => Ticket.Category)" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                        <button class="btn btn-info" type="submit">@(IsEdit ? "Update" : "Create")</button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public Ticket Ticket { get; set; }

    [Parameter]
    public EventCallback<Ticket> OnSubmitted { get; set; }

    private async Task onSumbit()
    {
        Ticket.Answers = new List<TicketAnswer>();
        await JsRuntime.InvokeVoidAsync("HideModal", "ticketModal");
        await OnSubmitted.InvokeAsync(Ticket);
    }
}
