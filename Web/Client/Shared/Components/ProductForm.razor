@using Core.Models;
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles = "Admin, Moderator")]

<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@(IsEdit ? "Update" : "Create") Product</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @if (Product != null)
            {
                <EditForm Model="@Product" OnValidSubmit="onSumbit">
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label for="name">Short Name</label>
                            <InputText id="shortname" class="form-control" @bind-Value="@Product.ShortName" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Product.ShortName)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="name">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="@Product.Name" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Product.Name)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="description">Description</label>
                            <InputTextArea rows="8" id="descirption" class="form-control" @bind-Value="@Product.Description" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Product.Description)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="price">Price</label>
                            <InputNumber id="price" class="form-control" @bind-Value="@Product.Price" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Product.Price)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="duration">Rank Id</label>
                            <InputNumber id="rankid" class="form-control" @bind-Value="@Product.RankId" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Product.RankId)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="duration">Coins</label>
                            <InputNumber id="coins" class="form-control" @bind-Value="@Product.Coins" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Product.Coins)" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button class="btn btn-primary" type="submit">@(IsEdit ? "Update" : "Create")</button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public Product Product { get; set; }

    [Parameter]
    public EventCallback<Product> OnSubmitted { get; set; }

    private async Task onSumbit()
    {
        await JsRuntime.InvokeVoidAsync("HideModal", "productModal");
        await OnSubmitted.InvokeAsync(Product);
    }

    //async Task SetImage()
    //{
    //    string data = await JsRuntime.InvokeAsync<string>("getFileData", "fileUpload");
    //    Product.Image = Convert.FromBase64String(data);
    //}
}
