@inject HttpClient httpClient
@inject IJSRuntime JsRuntime
@using Core.Models;
@using Markdig;

<div class="row justify-content-center">
    <div class="col-xl-9 card">
        <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs">
                <li class="nav-item">
                    <a class="nav-link @(active == "ranks" ? "active" : "")" @onclick="@(x => active = "ranks")" href="javascript:void(0)">Ranks</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(active == "coins" ? "active" : "")" @onclick="@(x => active = "coins")" href="javascript:void(0)">Coins</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(active == "bundle" ? "active" : "")" @onclick="@(x => active = "bundle")" href="javascript:void(0)">Bundles</a>
                </li>
            </ul>
        </div>
        <div class="card-body">
            <h4 class="card-title">Restore Monarchy Servers Shop</h4>
            <p class="card-text">Have fun buying the perks that fit you and be sure to give us a review!</p>
            <div class="card-group">
                @if (products != null)
                {
                    @foreach (var product in products.Where(x => x.Category.Equals(active, StringComparison.OrdinalIgnoreCase)))
                    {
                        <div class="card mr-lg-4" style="max-width: 300px;">
                            <img class="card-img-top" style="max-width: 100%;" src="">
                            <div class="card-actions text-right">
                                <button class="btn btn-primary mr-2" type="button" @onclick="@(() => PreviewProduct(product))">
                                    Details
                                </button>
                                <a class="btn btn-primary" href="/shop/checkout/@product.ProductId">Buy for @product.Price.ToString("C")</a>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="progress">
                        <div class="progress-bar progress-bar-indeterminate" role="progressbar"></div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-xl-3 d-none d-xl-block">
        <div class="card mb-2">
            <div class="card-body">
                <h5 class="card-title">Quick tip</h5>
                <p class="card-text">Don't steal your mum's credit card to pay!</p>
            </div>
        </div>
        <div class="card mb-2">
            <div class="card-body">
                <h5 class="card-title">Discord Guild</h5>
                <h6 class="card-subtitle mb-2 text-muted">It's time to ditch Skype and TeamSpeak!</h6>
                <a href="https://discord.gg/SswRqqC" class="btn btn-primary">Join us!</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="productPreview" tabindex="-1" role="dialog" aria-labelledby="productPreviewLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        @if (product != null)
        {
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productPreviewLabel">@product.Name</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @(new MarkupString(Markdown.ToHtml(product.Description)))
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <a class="btn btn-info" href="/shop/checkout/@product.ProductId" data-dismiss="modal">Buy Now</a>
                </div>
            </div>
        }
    </div>
</div>

@code {
    string active = "ranks";

    List<Product> products = new List<Product>();
    Product product;

    protected override async Task OnInitializedAsync()
    {
        products = await httpClient.GetJsonAsync<List<Product>>("api/products");
    }

    async Task PreviewProduct(Product product)
    {
        this.product = product;
        await JsRuntime.InvokeVoidAsync("ShowModal", "productPreview");
    }
}