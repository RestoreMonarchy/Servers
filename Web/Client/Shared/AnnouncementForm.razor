@using System.Globalization;
@using System.Security.Claims;
@using Markdig;
@using Core.Models;

<AuthorizeView>
    <Authorized>
        <div class="row justify-content-center">
            <div class="card col-xl-6">
                <div class="card-body">
                    <h5 class="card-title">
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">Title</span>
                            </div>
                            <input type="text" @bind="@Announcement.Title" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" />
                        </div>
                    </h5>
                    <p class="card-text">
                        <h3>Content</h3>
                        <textarea rows="20" class="form-control" aria-label="With textarea" @bind="@Announcement.Content"></textarea>
                    </p>
                    <p class="card-text">
                        <small class="text-muted">
                            Published on @DateTime.Now.ToString("G", CultureInfo.CreateSpecificCulture("fr-FR"))
                            by @context.User.FindFirst(ClaimTypes.GivenName).Value
                        </small>
                    </p>
                </div>
            </div>
            <div class="card col-xl-6">
                <div class="card-body">
                    <h5 class="card-title">@Announcement.Title</h5>
                    <p class="card-text">
                        @if (Announcement.Content != null)
                        {
                            @(new MarkupString(Markdown.ToHtml(Announcement.Content)))
                        }
                    </p>
                    <p class="card-text"><small class="text-muted">Published on @DateTime.Now.ToString("G", CultureInfo.CreateSpecificCulture("fr-FR")) by @context.User.FindFirst(ClaimTypes.GivenName).Value</small></p>
                </div>
            </div>
        </div>

        <button class="btn btn-info mt-2" @onclick="@onClick">@(IsEdit ? "Update" : "Create")</button>
    </Authorized>
    <NotAuthorized>
        <div class="progress">
            <div class="progress-bar progress-bar-indeterminate" role="progressbar"></div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public Announcement Announcement { get; set; }

    [Parameter]
    public EventCallback<Announcement> OnSubmitted { get; set; }

    private async Task onClick(MouseEventArgs args)
    {
        await OnSubmitted.InvokeAsync(Announcement);
    }
}
